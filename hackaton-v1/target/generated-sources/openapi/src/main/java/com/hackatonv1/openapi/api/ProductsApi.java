/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.hackatonv1.openapi.api;

import com.hackatonv1.openapi.model.NewProduct;
import com.hackatonv1.openapi.model.Product;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-08-05T16:11:04.886920600-05:00[America/Lima]")
@Validated
@Tag(name = "products", description = "the products API")
public interface ProductsApi {

    default ProductsApiDelegate getDelegate() {
        return new ProductsApiDelegate() {};
    }

    /**
     * POST /products : A単adir un nuevo producto
     *
     * @param newProduct  (required)
     * @return Producto a単adido exitosamente (status code 201)
     *         or Error del servidor (status code 500)
     */
    @Operation(
        operationId = "addProduct",
        summary = "A単adir un nuevo producto",
        responses = {
            @ApiResponse(responseCode = "201", description = "Producto a単adido exitosamente"),
            @ApiResponse(responseCode = "500", description = "Error del servidor")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addProduct(
        @Parameter(name = "NewProduct", description = "", required = true) @Valid @RequestBody NewProduct newProduct
    ) {
        return getDelegate().addProduct(newProduct);
    }


    /**
     * GET /products/{productId} : Obtener un producto por ID
     *
     * @param productId ID del producto a obtener (required)
     * @return Producto encontrado (status code 200)
     *         or Producto no encontrado (status code 404)
     *         or Error del servidor (status code 500)
     */
    @Operation(
        operationId = "getProductById",
        summary = "Obtener un producto por ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Producto encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
            }),
            @ApiResponse(responseCode = "404", description = "Producto no encontrado"),
            @ApiResponse(responseCode = "500", description = "Error del servidor")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/{productId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Product> getProductById(
        @Parameter(name = "productId", description = "ID del producto a obtener", required = true, in = ParameterIn.PATH) @PathVariable("productId") Integer productId
    ) {
        return getDelegate().getProductById(productId);
    }


    /**
     * GET /products : Obtener lista de productos
     *
     * @return Lista de productos exitosa (status code 200)
     *         or Error del servidor (status code 500)
     */
    @Operation(
        operationId = "getProducts",
        summary = "Obtener lista de productos",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de productos exitosa", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Product.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Error del servidor")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Product>> getProducts(
        
    ) {
        return getDelegate().getProducts();
    }


    /**
     * PUT /products/{productId} : Modificar datos de un producto por ID
     *
     * @param productId ID del producto a modificar (required)
     * @param product  (required)
     * @return Producto modificado exitosamente (status code 200)
     *         or Producto no encontrado (status code 404)
     *         or Error del servidor (status code 500)
     */
    @Operation(
        operationId = "updateProductById",
        summary = "Modificar datos de un producto por ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Producto modificado exitosamente"),
            @ApiResponse(responseCode = "404", description = "Producto no encontrado"),
            @ApiResponse(responseCode = "500", description = "Error del servidor")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/products/{productId}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateProductById(
        @Parameter(name = "productId", description = "ID del producto a modificar", required = true, in = ParameterIn.PATH) @PathVariable("productId") Integer productId,
        @Parameter(name = "Product", description = "", required = true) @Valid @RequestBody Product product
    ) {
        return getDelegate().updateProductById(productId, product);
    }

}
